{"ast":null,"code":"var _jsxFileName = \"/Users/zetachua/Documents/GitHub/DanceMarketplace/src/Components/ScreenrecordToGif/screenRecordToGif.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport GIF from 'gif.js-upgrade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GifConverter = () => {\n  _s();\n  const videoRef = useRef();\n  const convertWebMToGIF = webmBlob => {\n    const videoElement = document.createElement('video');\n    videoElement.src = URL.createObjectURL(webmBlob);\n    videoElement.addEventListener('loadeddata', async () => {\n      const gif = new GIF({\n        workers: 2,\n        quality: 10\n      });\n      const originalCanvas = document.createElement('canvas');\n      const originalCtx = originalCanvas.getContext('2d');\n      const processingCanvas = document.createElement('canvas');\n      const processingCtx = processingCanvas.getContext('2d');\n\n      // Set original canvas dimensions to the video dimensions\n      originalCanvas.width = videoElement.videoWidth;\n      originalCanvas.height = videoElement.videoHeight;\n\n      // Set processing canvas dimensions to a downscaled version of the video dimensions\n      const scaleFactor = 0.5; // Adjust as needed\n      processingCanvas.width = videoElement.videoWidth * scaleFactor;\n      processingCanvas.height = videoElement.videoHeight * scaleFactor;\n      const frameDuration = 40; // Adjust the delay as needed (25 frames per second)\n\n      let currentTime = 0;\n      const processFrame = () => {\n        originalCtx.drawImage(videoElement, 0, 0, videoElement.videoWidth, videoElement.videoHeight);\n\n        // Draw the original frame onto the processing canvas (downscaled)\n        processingCtx.drawImage(originalCanvas, 0, 0, originalCanvas.width, originalCanvas.height, 0, 0, processingCanvas.width, processingCanvas.height);\n\n        // Get the current frame as imageData\n        const imageData = processingCtx.getImageData(0, 0, processingCanvas.width, processingCanvas.height);\n\n        // Add the imageData as a frame to the GIF\n        gif.addFrame(imageData, {\n          delay: frameDuration\n        });\n\n        // Update the currentTime for the next frame\n        currentTime += frameDuration / 1000;\n\n        // Request the next frame\n        if (currentTime < videoElement.duration) {\n          requestAnimationFrame(processFrame);\n        } else {\n          // Finish and render the GIF when all frames are processed\n          gif.on('finished', blob => {\n            const gifUrl = URL.createObjectURL(blob);\n            videoRef.current.src = gifUrl;\n          });\n          gif.render();\n        }\n      };\n\n      // Start processing frames\n      processFrame();\n    });\n  };\n  const handleConvertClick = () => {\n    // Simulate getting a WebM blob from somewhere (e.g., recorded video)\n    // Replace this with the actual method of obtaining the WebM blob\n    const dummyWebMBlob = new Blob( /* your WebM data here */);\n\n    // Convert the WebM to GIF\n    convertWebMToGIF(dummyWebMBlob);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvertClick,\n      children: \"Convert WebM to GIF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      style: {\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(GifConverter, \"0CLVWOVx+8g0ODBjgEMJWUwEryM=\");\n_c = GifConverter;\nexport default GifConverter;\nvar _c;\n$RefreshReg$(_c, \"GifConverter\");","map":{"version":3,"names":["React","useRef","GIF","jsxDEV","_jsxDEV","GifConverter","_s","videoRef","convertWebMToGIF","webmBlob","videoElement","document","createElement","src","URL","createObjectURL","addEventListener","gif","workers","quality","originalCanvas","originalCtx","getContext","processingCanvas","processingCtx","width","videoWidth","height","videoHeight","scaleFactor","frameDuration","currentTime","processFrame","drawImage","imageData","getImageData","addFrame","delay","duration","requestAnimationFrame","on","blob","gifUrl","current","render","handleConvertClick","dummyWebMBlob","Blob","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","controls","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/src/Components/ScreenrecordToGif/screenRecordToGif.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport GIF from 'gif.js-upgrade';\n\nconst GifConverter = () => {\n  const videoRef = useRef();\n\n  const convertWebMToGIF = (webmBlob) => {\n    const videoElement = document.createElement('video');\n    videoElement.src = URL.createObjectURL(webmBlob);\n    videoElement.addEventListener('loadeddata', async () => {\n      const gif = new GIF({ workers: 2, quality: 10 });\n      const originalCanvas = document.createElement('canvas');\n      const originalCtx = originalCanvas.getContext('2d');\n\n      const processingCanvas = document.createElement('canvas');\n      const processingCtx = processingCanvas.getContext('2d');\n\n      // Set original canvas dimensions to the video dimensions\n      originalCanvas.width = videoElement.videoWidth;\n      originalCanvas.height = videoElement.videoHeight;\n\n      // Set processing canvas dimensions to a downscaled version of the video dimensions\n      const scaleFactor = 0.5; // Adjust as needed\n      processingCanvas.width = videoElement.videoWidth * scaleFactor;\n      processingCanvas.height = videoElement.videoHeight * scaleFactor;\n\n      const frameDuration = 40; // Adjust the delay as needed (25 frames per second)\n\n      let currentTime = 0;\n\n      const processFrame = () => {\n        originalCtx.drawImage(\n          videoElement,\n          0,\n          0,\n          videoElement.videoWidth,\n          videoElement.videoHeight\n        );\n\n        // Draw the original frame onto the processing canvas (downscaled)\n        processingCtx.drawImage(\n          originalCanvas,\n          0,\n          0,\n          originalCanvas.width,\n          originalCanvas.height,\n          0,\n          0,\n          processingCanvas.width,\n          processingCanvas.height\n        );\n\n        // Get the current frame as imageData\n        const imageData = processingCtx.getImageData(0, 0, processingCanvas.width, processingCanvas.height);\n\n        // Add the imageData as a frame to the GIF\n        gif.addFrame(imageData, { delay: frameDuration });\n\n        // Update the currentTime for the next frame\n        currentTime += frameDuration / 1000;\n\n        // Request the next frame\n        if (currentTime < videoElement.duration) {\n          requestAnimationFrame(processFrame);\n        } else {\n          // Finish and render the GIF when all frames are processed\n          gif.on('finished', (blob) => {\n            const gifUrl = URL.createObjectURL(blob);\n            videoRef.current.src = gifUrl;\n          });\n\n          gif.render();\n        }\n      };\n\n      // Start processing frames\n      processFrame();\n    });\n  };\n\n  const handleConvertClick = () => {\n    // Simulate getting a WebM blob from somewhere (e.g., recorded video)\n    // Replace this with the actual method of obtaining the WebM blob\n    const dummyWebMBlob = new Blob(/* your WebM data here */);\n\n    // Convert the WebM to GIF\n    convertWebMToGIF(dummyWebMBlob);\n  };\n\n  return (\n    <div>\n      <button onClick={handleConvertClick}>\n        Convert WebM to GIF\n      </button>\n      <video ref={videoRef} controls style={{ marginTop: '10px' }} />\n    </div>\n  );\n};\n\nexport default GifConverter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}