{"ast":null,"code":"/*\n\tvar vid = new Whammy.Video();\n\tvid.add(canvas or data url)\n\tvid.compile()\n*/\n\nglobal.Whammy = function () {\n  // in this case, frames has a very specific meaning, which will be \n  // detailed once i finish writing the code\n\n  function toWebM(frames, outputAsArray) {\n    var info = checkFrames(frames);\n\n    //max duration by cluster in milliseconds\n    var CLUSTER_MAX_DURATION = 30000;\n    var EBML = [{\n      \"id\": 0x1a45dfa3,\n      // EBML\n      \"data\": [{\n        \"data\": 1,\n        \"id\": 0x4286 // EBMLVersion\n      }, {\n        \"data\": 1,\n        \"id\": 0x42f7 // EBMLReadVersion\n      }, {\n        \"data\": 4,\n        \"id\": 0x42f2 // EBMLMaxIDLength\n      }, {\n        \"data\": 8,\n        \"id\": 0x42f3 // EBMLMaxSizeLength\n      }, {\n        \"data\": \"webm\",\n        \"id\": 0x4282 // DocType\n      }, {\n        \"data\": 2,\n        \"id\": 0x4287 // DocTypeVersion\n      }, {\n        \"data\": 2,\n        \"id\": 0x4285 // DocTypeReadVersion\n      }]\n    }, {\n      \"id\": 0x18538067,\n      // Segment\n      \"data\": [{\n        \"id\": 0x1549a966,\n        // Info\n        \"data\": [{\n          \"data\": 1e6,\n          //do things in millisecs (num of nanosecs for duration scale)\n          \"id\": 0x2ad7b1 // TimecodeScale\n        }, {\n          \"data\": \"whammy\",\n          \"id\": 0x4d80 // MuxingApp\n        }, {\n          \"data\": \"whammy\",\n          \"id\": 0x5741 // WritingApp\n        }, {\n          \"data\": doubleToString(info.duration),\n          \"id\": 0x4489 // Duration\n        }]\n      }, {\n        \"id\": 0x1654ae6b,\n        // Tracks\n        \"data\": [{\n          \"id\": 0xae,\n          // TrackEntry\n          \"data\": [{\n            \"data\": 1,\n            \"id\": 0xd7 // TrackNumber\n          }, {\n            \"data\": 1,\n            \"id\": 0x63c5 // TrackUID\n          }, {\n            \"data\": 0,\n            \"id\": 0x9c // FlagLacing\n          }, {\n            \"data\": \"und\",\n            \"id\": 0x22b59c // Language\n          }, {\n            \"data\": \"V_VP8\",\n            \"id\": 0x86 // CodecID\n          }, {\n            \"data\": \"VP8\",\n            \"id\": 0x258688 // CodecName\n          }, {\n            \"data\": 1,\n            \"id\": 0x83 // TrackType\n          }, {\n            \"id\": 0xe0,\n            // Video\n            \"data\": [{\n              \"data\": info.width,\n              \"id\": 0xb0 // PixelWidth\n            }, {\n              \"data\": info.height,\n              \"id\": 0xba // PixelHeight\n            }]\n          }]\n        }]\n      }\n\n      //cluster insertion point\n      ]\n    }];\n\n    //Generate clusters (max duration)\n    var frameNumber = 0;\n    var clusterTimecode = 0;\n    while (frameNumber < frames.length) {\n      var clusterFrames = [];\n      var clusterDuration = 0;\n      do {\n        clusterFrames.push(frames[frameNumber]);\n        clusterDuration += frames[frameNumber].duration;\n        frameNumber++;\n      } while (frameNumber < frames.length && clusterDuration < CLUSTER_MAX_DURATION);\n      var clusterCounter = 0;\n      var cluster = {\n        \"id\": 0x1f43b675,\n        // Cluster\n        \"data\": [{\n          \"data\": clusterTimecode,\n          \"id\": 0xe7 // Timecode\n        }].concat(clusterFrames.map(function (webp) {\n          var block = makeSimpleBlock({\n            discardable: 0,\n            frame: webp.data.slice(4),\n            invisible: 0,\n            keyframe: 1,\n            lacing: 0,\n            trackNum: 1,\n            timecode: Math.round(clusterCounter)\n          });\n          clusterCounter += webp.duration;\n          return {\n            data: block,\n            id: 0xa3\n          };\n        }))\n      };\n\n      //Add cluster to segment\n      EBML[1].data.push(cluster);\n      clusterTimecode += clusterDuration;\n    }\n    return generateEBML(EBML, outputAsArray);\n  }\n\n  // sums the lengths of all the frames and gets the duration, woo\n\n  function checkFrames(frames) {\n    var width = frames[0].width,\n      height = frames[0].height,\n      duration = frames[0].duration;\n    for (var i = 1; i < frames.length; i++) {\n      if (frames[i].width != width) throw \"Frame \" + (i + 1) + \" has a different width\";\n      if (frames[i].height != height) throw \"Frame \" + (i + 1) + \" has a different height\";\n      if (frames[i].duration < 0 || frames[i].duration > 0x7fff) throw \"Frame \" + (i + 1) + \" has a weird duration (must be between 0 and 32767)\";\n      duration += frames[i].duration;\n    }\n    return {\n      duration: duration,\n      width: width,\n      height: height\n    };\n  }\n  function numToBuffer(num) {\n    var parts = [];\n    while (num > 0) {\n      parts.push(num & 0xff);\n      num = num >> 8;\n    }\n    return new Uint8Array(parts.reverse());\n  }\n  function strToBuffer(str) {\n    // return new Blob([str]);\n\n    var arr = new Uint8Array(str.length);\n    for (var i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n    // this is slower\n    // return new Uint8Array(str.split('').map(function(e){\n    // \treturn e.charCodeAt(0)\n    // }))\n  }\n\n  //sorry this is ugly, and sort of hard to understand exactly why this was done\n  // at all really, but the reason is that there's some code below that i dont really\n  // feel like understanding, and this is easier than using my brain.\n\n  function bitsToBuffer(bits) {\n    var data = [];\n    var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n    bits = pad + bits;\n    for (var i = 0; i < bits.length; i += 8) {\n      data.push(parseInt(bits.substr(i, 8), 2));\n    }\n    return new Uint8Array(data);\n  }\n  function generateEBML(json, outputAsArray) {\n    var ebml = [];\n    for (var i = 0; i < json.length; i++) {\n      var data = json[i].data;\n      if (typeof data == 'object') data = generateEBML(data, outputAsArray);\n      if (typeof data == 'number') data = bitsToBuffer(data.toString(2));\n      if (typeof data == 'string') data = strToBuffer(data);\n      if (data.length) {\n        var z = z;\n      }\n      var len = data.size || data.byteLength || data.length;\n      var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n      var size_str = len.toString(2);\n      var padded = new Array(zeroes * 7 + 7 + 1 - size_str.length).join('0') + size_str;\n      var size = new Array(zeroes).join('0') + '1' + padded;\n\n      //i actually dont quite understand what went on up there, so I'm not really\n      //going to fix this, i'm probably just going to write some hacky thing which\n      //converts that string into a buffer-esque thing\n\n      ebml.push(numToBuffer(json[i].id));\n      ebml.push(bitsToBuffer(size));\n      ebml.push(data);\n    }\n\n    //output as blob or byteArray\n    if (outputAsArray) {\n      //convert ebml to an array\n      var buffer = toFlatArray(ebml);\n      return new Uint8Array(buffer);\n    } else {\n      return new Blob(ebml, {\n        type: \"video/webm\"\n      });\n    }\n  }\n  function toFlatArray(arr, outBuffer) {\n    if (outBuffer == null) {\n      outBuffer = [];\n    }\n    for (var i = 0; i < arr.length; i++) {\n      if (typeof arr[i] == 'object') {\n        //an array\n        toFlatArray(arr[i], outBuffer);\n      } else {\n        //a simple element\n        outBuffer.push(arr[i]);\n      }\n    }\n    return outBuffer;\n  }\n\n  //OKAY, so the following two functions are the string-based old stuff, the reason they're\n  //still sort of in here, is that they're actually faster than the new blob stuff because\n  //getAsFile isn't widely implemented, or at least, it doesn't work in chrome, which is the\n  // only browser which supports get as webp\n\n  //Converting between a string of 0010101001's and binary back and forth is probably inefficient\n  //TODO: get rid of this function\n  function toBinStr_old(bits) {\n    var data = '';\n    var pad = bits.length % 8 ? new Array(1 + 8 - bits.length % 8).join('0') : '';\n    bits = pad + bits;\n    for (var i = 0; i < bits.length; i += 8) {\n      data += String.fromCharCode(parseInt(bits.substr(i, 8), 2));\n    }\n    return data;\n  }\n  function generateEBML_old(json) {\n    var ebml = '';\n    for (var i = 0; i < json.length; i++) {\n      var data = json[i].data;\n      if (typeof data == 'object') data = generateEBML_old(data);\n      if (typeof data == 'number') data = toBinStr_old(data.toString(2));\n      var len = data.length;\n      var zeroes = Math.ceil(Math.ceil(Math.log(len) / Math.log(2)) / 8);\n      var size_str = len.toString(2);\n      var padded = new Array(zeroes * 7 + 7 + 1 - size_str.length).join('0') + size_str;\n      var size = new Array(zeroes).join('0') + '1' + padded;\n      ebml += toBinStr_old(json[i].id.toString(2)) + toBinStr_old(size) + data;\n    }\n    return ebml;\n  }\n\n  //woot, a function that's actually written for this project!\n  //this parses some json markup and makes it into that binary magic\n  //which can then get shoved into the matroska comtainer (peaceably)\n\n  function makeSimpleBlock(data) {\n    var flags = 0;\n    if (data.keyframe) flags |= 128;\n    if (data.invisible) flags |= 8;\n    if (data.lacing) flags |= data.lacing << 1;\n    if (data.discardable) flags |= 1;\n    if (data.trackNum > 127) {\n      throw \"TrackNumber > 127 not supported\";\n    }\n    var out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function (e) {\n      return String.fromCharCode(e);\n    }).join('') + data.frame;\n    return out;\n  }\n\n  // here's something else taken verbatim from weppy, awesome rite?\n\n  function parseWebP(riff) {\n    var VP8 = riff.RIFF[0].WEBP[0];\n    var frame_start = VP8.indexOf('\\x9d\\x01\\x2a'); //A VP8 keyframe starts with the 0x9d012a header\n    for (var i = 0, c = []; i < 4; i++) c[i] = VP8.charCodeAt(frame_start + 3 + i);\n    var width, horizontal_scale, height, vertical_scale, tmp;\n\n    //the code below is literally copied verbatim from the bitstream spec\n    tmp = c[1] << 8 | c[0];\n    width = tmp & 0x3FFF;\n    horizontal_scale = tmp >> 14;\n    tmp = c[3] << 8 | c[2];\n    height = tmp & 0x3FFF;\n    vertical_scale = tmp >> 14;\n    return {\n      width: width,\n      height: height,\n      data: VP8,\n      riff: riff\n    };\n  }\n\n  // i think i'm going off on a riff by pretending this is some known\n  // idiom which i'm making a casual and brilliant pun about, but since\n  // i can't find anything on google which conforms to this idiomatic\n  // usage, I'm assuming this is just a consequence of some psychotic\n  // break which makes me make up puns. well, enough riff-raff (aha a\n  // rescue of sorts), this function was ripped wholesale from weppy\n\n  function parseRIFF(string) {\n    var offset = 0;\n    var chunks = {};\n    while (offset < string.length) {\n      var id = string.substr(offset, 4);\n      var len = parseInt(string.substr(offset + 4, 4).split('').map(function (i) {\n        var unpadded = i.charCodeAt(0).toString(2);\n        return new Array(8 - unpadded.length + 1).join('0') + unpadded;\n      }).join(''), 2);\n      var data = string.substr(offset + 4 + 4, len);\n      offset += 4 + 4 + len;\n      chunks[id] = chunks[id] || [];\n      if (id == 'RIFF' || id == 'LIST') {\n        chunks[id].push(parseRIFF(data));\n      } else {\n        chunks[id].push(data);\n      }\n    }\n    return chunks;\n  }\n\n  // here's a little utility function that acts as a utility for other functions\n  // basically, the only purpose is for encoding \"Duration\", which is encoded as\n  // a double (considerably more difficult to encode than an integer)\n  function doubleToString(num) {\n    return [].slice.call(new Uint8Array(new Float64Array([num]) //create a float64 array\n    .buffer) //extract the array buffer\n    , 0) // convert the Uint8Array into a regular array\n    .map(function (e) {\n      //since it's a regular array, we can now use map\n      return String.fromCharCode(e); // encode all the bytes individually\n    }).reverse() //correct the byte endianness (assume it's little endian for now)\n    .join(''); // join the bytes in holy matrimony as a string\n  }\n\n  function WhammyVideo(speed, quality) {\n    // a more abstract-ish API\n    this.frames = [];\n    this.duration = 1000 / speed;\n    this.quality = quality || 0.8;\n  }\n  WhammyVideo.prototype.add = function (frame, duration) {\n    if (typeof duration != 'undefined' && this.duration) throw \"you can't pass a duration if the fps is set\";\n    if (typeof duration == 'undefined' && !this.duration) throw \"if you don't have the fps set, you ned to have durations here.\";\n    if ('canvas' in frame) {\n      //CanvasRenderingContext2D\n      frame = frame.canvas;\n    }\n    if ('toDataURL' in frame) {\n      frame = frame.toDataURL('image/webp', this.quality);\n    } else if (typeof frame != \"string\") {\n      throw \"frame must be a a HTMLCanvasElement, a CanvasRenderingContext2D or a DataURI formatted string\";\n    }\n    if (!/^data:image\\/webp;base64,/ig.test(frame)) {\n      throw \"Input must be formatted properly as a base64 encoded DataURI of type image/webp\";\n    }\n    this.frames.push({\n      image: frame,\n      duration: duration || this.duration\n    });\n  };\n  WhammyVideo.prototype.compile = function (outputAsArray) {\n    return new toWebM(this.frames.map(function (frame) {\n      var webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n      webp.duration = frame.duration;\n      return webp;\n    }), outputAsArray);\n  };\n  return {\n    Video: WhammyVideo,\n    fromImageArray: function (images, fps, outputAsArray) {\n      return toWebM(images.map(function (image) {\n        var webp = parseWebP(parseRIFF(atob(image.slice(23))));\n        webp.duration = 1000 / fps;\n        return webp;\n      }), outputAsArray);\n    },\n    toWebM: toWebM\n    // expose methods of madness\n  };\n}();\n\nif (typeof process !== 'undefined') module.exports = Whammy;","map":{"version":3,"names":["global","Whammy","toWebM","frames","outputAsArray","info","checkFrames","CLUSTER_MAX_DURATION","EBML","doubleToString","duration","width","height","frameNumber","clusterTimecode","length","clusterFrames","clusterDuration","push","clusterCounter","cluster","concat","map","webp","block","makeSimpleBlock","discardable","frame","data","slice","invisible","keyframe","lacing","trackNum","timecode","Math","round","id","generateEBML","i","numToBuffer","num","parts","Uint8Array","reverse","strToBuffer","str","arr","charCodeAt","bitsToBuffer","bits","pad","Array","join","parseInt","substr","json","ebml","toString","z","len","size","byteLength","zeroes","ceil","log","size_str","padded","buffer","toFlatArray","Blob","type","outBuffer","toBinStr_old","String","fromCharCode","generateEBML_old","flags","out","e","parseWebP","riff","VP8","RIFF","WEBP","frame_start","indexOf","c","horizontal_scale","vertical_scale","tmp","parseRIFF","string","offset","chunks","split","unpadded","call","Float64Array","WhammyVideo","speed","quality","prototype","add","canvas","toDataURL","test","image","compile","atob","Video","fromImageArray","images","fps","process","module","exports"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/node_modules/whammy/whammy.js"],"sourcesContent":["/*\n\tvar vid = new Whammy.Video();\n\tvid.add(canvas or data url)\n\tvid.compile()\n*/\n\nglobal.Whammy = (function(){\n\t// in this case, frames has a very specific meaning, which will be \n\t// detailed once i finish writing the code\n\n\tfunction toWebM(frames, outputAsArray){\n\t\tvar info = checkFrames(frames);\n\n\t\t//max duration by cluster in milliseconds\n\t\tvar CLUSTER_MAX_DURATION = 30000;\n\t\t\n\t\tvar EBML = [\n\t\t\t{\n\t\t\t\t\"id\": 0x1a45dfa3, // EBML\n\t\t\t\t\"data\": [\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 1,\n\t\t\t\t\t\t\"id\": 0x4286 // EBMLVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 1,\n\t\t\t\t\t\t\"id\": 0x42f7 // EBMLReadVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 4,\n\t\t\t\t\t\t\"id\": 0x42f2 // EBMLMaxIDLength\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 8,\n\t\t\t\t\t\t\"id\": 0x42f3 // EBMLMaxSizeLength\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": \"webm\",\n\t\t\t\t\t\t\"id\": 0x4282 // DocType\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 2,\n\t\t\t\t\t\t\"id\": 0x4287 // DocTypeVersion\n\t\t\t\t\t},\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"data\": 2,\n\t\t\t\t\t\t\"id\": 0x4285 // DocTypeReadVersion\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"id\": 0x18538067, // Segment\n\t\t\t\t\"data\": [\n\t\t\t\t\t{ \n\t\t\t\t\t\t\"id\": 0x1549a966, // Info\n\t\t\t\t\t\t\"data\": [\n\t\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t\t\"data\": 1e6, //do things in millisecs (num of nanosecs for duration scale)\n\t\t\t\t\t\t\t\t\"id\": 0x2ad7b1 // TimecodeScale\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\"data\": \"whammy\",\n\t\t\t\t\t\t\t\t\"id\": 0x4d80 // MuxingApp\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\"data\": \"whammy\",\n\t\t\t\t\t\t\t\t\"id\": 0x5741 // WritingApp\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\"data\": doubleToString(info.duration),\n\t\t\t\t\t\t\t\t\"id\": 0x4489 // Duration\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"id\": 0x1654ae6b, // Tracks\n\t\t\t\t\t\t\"data\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"id\": 0xae, // TrackEntry\n\t\t\t\t\t\t\t\t\"data\": [\n\t\t\t\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t\t\t\t\"data\": 1,\n\t\t\t\t\t\t\t\t\t\t\"id\": 0xd7 // TrackNumber\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": 1,\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x63c5 // TrackUID\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": 0,\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x9c // FlagLacing\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": \"und\",\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x22b59c // Language\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": \"V_VP8\",\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x86 // CodecID\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": \"VP8\",\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x258688 // CodecName\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\"data\": 1,\n\t\t\t\t\t\t\t\t\t\t\"id\": 0x83 // TrackType\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\"id\": 0xe0,  // Video\n\t\t\t\t\t\t\t\t\t\t\"data\": [\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\"data\": info.width,\n\t\t\t\t\t\t\t\t\t\t\t\t\"id\": 0xb0 // PixelWidth\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t{ \n\t\t\t\t\t\t\t\t\t\t\t\t\"data\": info.height,\n\t\t\t\t\t\t\t\t\t\t\t\t\"id\": 0xba // PixelHeight\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t},\n\n\t\t\t\t\t//cluster insertion point\n\t\t\t\t]\n\t\t\t}\n\t\t ];\n\n\t\t\t\t\t\t\n\t\t//Generate clusters (max duration)\n\t\tvar frameNumber = 0;\n\t\tvar clusterTimecode = 0;\n\t\twhile(frameNumber < frames.length){\n\t\t\t\n\t\t\tvar clusterFrames = [];\n\t\t\tvar clusterDuration = 0;\n\t\t\tdo {\n\t\t\t\tclusterFrames.push(frames[frameNumber]);\n\t\t\t\tclusterDuration += frames[frameNumber].duration;\n\t\t\t\tframeNumber++;\t\t\t\t\n\t\t\t}while(frameNumber < frames.length && clusterDuration < CLUSTER_MAX_DURATION);\n\t\t\t\t\t\t\n\t\t\tvar clusterCounter = 0;\t\t\t\n\t\t\tvar cluster = {\n\t\t\t\t\t\"id\": 0x1f43b675, // Cluster\n\t\t\t\t\t\"data\": [\n\t\t\t\t\t\t{  \n\t\t\t\t\t\t\t\"data\": clusterTimecode,\n\t\t\t\t\t\t\t\"id\": 0xe7 // Timecode\n\t\t\t\t\t\t}\n\t\t\t\t\t].concat(clusterFrames.map(function(webp){\n\t\t\t\t\t\tvar block = makeSimpleBlock({\n\t\t\t\t\t\t\tdiscardable: 0,\n\t\t\t\t\t\t\tframe: webp.data.slice(4),\n\t\t\t\t\t\t\tinvisible: 0,\n\t\t\t\t\t\t\tkeyframe: 1,\n\t\t\t\t\t\t\tlacing: 0,\n\t\t\t\t\t\t\ttrackNum: 1,\n\t\t\t\t\t\t\ttimecode: Math.round(clusterCounter)\n\t\t\t\t\t\t});\n\t\t\t\t\t\tclusterCounter += webp.duration;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: block,\n\t\t\t\t\t\t\tid: 0xa3\n\t\t\t\t\t\t};\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t\n\t\t\t//Add cluster to segment\n\t\t\tEBML[1].data.push(cluster);\t\t\t\n\t\t\tclusterTimecode += clusterDuration;\n\t\t}\n\t\t\t\t\t\t\n\t\treturn generateEBML(EBML, outputAsArray)\n\t}\n\n\t// sums the lengths of all the frames and gets the duration, woo\n\n\tfunction checkFrames(frames){\n\t\tvar width = frames[0].width, \n\t\t\theight = frames[0].height, \n\t\t\tduration = frames[0].duration;\n\t\tfor(var i = 1; i < frames.length; i++){\n\t\t\tif(frames[i].width != width) throw \"Frame \" + (i + 1) + \" has a different width\";\n\t\t\tif(frames[i].height != height) throw \"Frame \" + (i + 1) + \" has a different height\";\n\t\t\tif(frames[i].duration < 0 || frames[i].duration > 0x7fff) throw \"Frame \" + (i + 1) + \" has a weird duration (must be between 0 and 32767)\";\n\t\t\tduration += frames[i].duration;\n\t\t}\n\t\treturn {\n\t\t\tduration: duration,\n\t\t\twidth: width,\n\t\t\theight: height\n\t\t};\n\t}\n\n\n\tfunction numToBuffer(num){\n\t\tvar parts = [];\n\t\twhile(num > 0){\n\t\t\tparts.push(num & 0xff)\n\t\t\tnum = num >> 8\n\t\t}\n\t\treturn new Uint8Array(parts.reverse());\n\t}\n\n\tfunction strToBuffer(str){\n\t\t// return new Blob([str]);\n\n\t\tvar arr = new Uint8Array(str.length);\n\t\tfor(var i = 0; i < str.length; i++){\n\t\t\tarr[i] = str.charCodeAt(i)\n\t\t}\n\t\treturn arr;\n\t\t// this is slower\n\t\t// return new Uint8Array(str.split('').map(function(e){\n\t\t// \treturn e.charCodeAt(0)\n\t\t// }))\n\t}\n\n\n\t//sorry this is ugly, and sort of hard to understand exactly why this was done\n\t// at all really, but the reason is that there's some code below that i dont really\n\t// feel like understanding, and this is easier than using my brain.\n\n\tfunction bitsToBuffer(bits){\n\t\tvar data = [];\n\t\tvar pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n\t\tbits = pad + bits;\n\t\tfor(var i = 0; i < bits.length; i+= 8){\n\t\t\tdata.push(parseInt(bits.substr(i,8),2))\n\t\t}\n\t\treturn new Uint8Array(data);\n\t}\n\n\tfunction generateEBML(json, outputAsArray){\n\t\tvar ebml = [];\n\t\tfor(var i = 0; i < json.length; i++){\n\t\t\tvar data = json[i].data;\n\t\t\tif(typeof data == 'object') data = generateEBML(data, outputAsArray);\t\t\t\t\t\n\t\t\tif(typeof data == 'number') data = bitsToBuffer(data.toString(2));\n\t\t\tif(typeof data == 'string') data = strToBuffer(data);\n\n\t\t\tif(data.length){\n\t\t\t\tvar z = z;\n\t\t\t}\n\t\t\t\n\t\t\tvar len = data.size || data.byteLength || data.length;\n\t\t\tvar zeroes = Math.ceil(Math.ceil(Math.log(len)/Math.log(2))/8);\n\t\t\tvar size_str = len.toString(2);\n\t\t\tvar padded = (new Array((zeroes * 7 + 7 + 1) - size_str.length)).join('0') + size_str;\n\t\t\tvar size = (new Array(zeroes)).join('0') + '1' + padded;\n\t\t\t\n\t\t\t//i actually dont quite understand what went on up there, so I'm not really\n\t\t\t//going to fix this, i'm probably just going to write some hacky thing which\n\t\t\t//converts that string into a buffer-esque thing\n\n\t\t\tebml.push(numToBuffer(json[i].id));\n\t\t\tebml.push(bitsToBuffer(size));\n\t\t\tebml.push(data)\n\t\t\t\n\n\t\t}\n\t\t\n\t\t//output as blob or byteArray\n\t\tif(outputAsArray){\n\t\t\t//convert ebml to an array\n\t\t\tvar buffer = toFlatArray(ebml)\n\t\t\treturn new Uint8Array(buffer);\n\t\t}else{\n\t\t\treturn new Blob(ebml, {type: \"video/webm\"});\n\t\t}\n\t}\n\t\n\tfunction toFlatArray(arr, outBuffer){\n\t\tif(outBuffer == null){\n\t\t\toutBuffer = [];\n\t\t}\n\t\tfor(var i = 0; i < arr.length; i++){\n\t\t\tif(typeof arr[i] == 'object'){\n\t\t\t\t//an array\n\t\t\t\ttoFlatArray(arr[i], outBuffer)\n\t\t\t}else{\n\t\t\t\t//a simple element\n\t\t\t\toutBuffer.push(arr[i]);\n\t\t\t}\n\t\t}\n\t\treturn outBuffer;\n\t}\n\t\n\t//OKAY, so the following two functions are the string-based old stuff, the reason they're\n\t//still sort of in here, is that they're actually faster than the new blob stuff because\n\t//getAsFile isn't widely implemented, or at least, it doesn't work in chrome, which is the\n\t// only browser which supports get as webp\n\n\t//Converting between a string of 0010101001's and binary back and forth is probably inefficient\n\t//TODO: get rid of this function\n\tfunction toBinStr_old(bits){\n\t\tvar data = '';\n\t\tvar pad = (bits.length % 8) ? (new Array(1 + 8 - (bits.length % 8))).join('0') : '';\n\t\tbits = pad + bits;\n\t\tfor(var i = 0; i < bits.length; i+= 8){\n\t\t\tdata += String.fromCharCode(parseInt(bits.substr(i,8),2))\n\t\t}\n\t\treturn data;\n\t}\n\n\tfunction generateEBML_old(json){\n\t\tvar ebml = '';\n\t\tfor(var i = 0; i < json.length; i++){\n\t\t\tvar data = json[i].data;\n\t\t\tif(typeof data == 'object') data = generateEBML_old(data);\n\t\t\tif(typeof data == 'number') data = toBinStr_old(data.toString(2));\n\t\t\t\n\t\t\tvar len = data.length;\n\t\t\tvar zeroes = Math.ceil(Math.ceil(Math.log(len)/Math.log(2))/8);\n\t\t\tvar size_str = len.toString(2);\n\t\t\tvar padded = (new Array((zeroes * 7 + 7 + 1) - size_str.length)).join('0') + size_str;\n\t\t\tvar size = (new Array(zeroes)).join('0') + '1' + padded;\n\n\t\t\tebml += toBinStr_old(json[i].id.toString(2)) + toBinStr_old(size) + data;\n\n\t\t}\n\t\treturn ebml;\n\t}\n\n\t//woot, a function that's actually written for this project!\n\t//this parses some json markup and makes it into that binary magic\n\t//which can then get shoved into the matroska comtainer (peaceably)\n\n\tfunction makeSimpleBlock(data){\n\t\tvar flags = 0;\n\t\tif (data.keyframe) flags |= 128;\n\t\tif (data.invisible) flags |= 8;\n\t\tif (data.lacing) flags |= (data.lacing << 1);\n\t\tif (data.discardable) flags |= 1;\n\t\tif (data.trackNum > 127) {\n\t\t\tthrow \"TrackNumber > 127 not supported\";\n\t\t}\n\t\tvar out = [data.trackNum | 0x80, data.timecode >> 8, data.timecode & 0xff, flags].map(function(e){\n\t\t\treturn String.fromCharCode(e)\n\t\t}).join('') + data.frame;\n\n\t\treturn out;\n\t}\n\n\t// here's something else taken verbatim from weppy, awesome rite?\n\n\tfunction parseWebP(riff){\n\t\tvar VP8 = riff.RIFF[0].WEBP[0];\n\t\t\n\t\tvar frame_start = VP8.indexOf('\\x9d\\x01\\x2a'); //A VP8 keyframe starts with the 0x9d012a header\n\t\tfor(var i = 0, c = []; i < 4; i++) c[i] = VP8.charCodeAt(frame_start + 3 + i);\n\t\t\n\t\tvar width, horizontal_scale, height, vertical_scale, tmp;\n\t\t\n\t\t//the code below is literally copied verbatim from the bitstream spec\n\t\ttmp = (c[1] << 8) | c[0];\n\t\twidth = tmp & 0x3FFF;\n\t\thorizontal_scale = tmp >> 14;\n\t\ttmp = (c[3] << 8) | c[2];\n\t\theight = tmp & 0x3FFF;\n\t\tvertical_scale = tmp >> 14;\n\t\treturn {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: VP8,\n\t\t\triff: riff\n\t\t}\n\t}\n\n\t// i think i'm going off on a riff by pretending this is some known\n\t// idiom which i'm making a casual and brilliant pun about, but since\n\t// i can't find anything on google which conforms to this idiomatic\n\t// usage, I'm assuming this is just a consequence of some psychotic\n\t// break which makes me make up puns. well, enough riff-raff (aha a\n\t// rescue of sorts), this function was ripped wholesale from weppy\n\n\tfunction parseRIFF(string){\n\t\tvar offset = 0;\n\t\tvar chunks = {};\n\t\t\n\t\twhile (offset < string.length) {\n\t\t\tvar id = string.substr(offset, 4);\n\t\t\tvar len = parseInt(string.substr(offset + 4, 4).split('').map(function(i){\n\t\t\t\tvar unpadded = i.charCodeAt(0).toString(2);\n\t\t\t\treturn (new Array(8 - unpadded.length + 1)).join('0') + unpadded\n\t\t\t}).join(''),2);\n\t\t\tvar data = string.substr(offset + 4 + 4, len);\n\t\t\toffset += 4 + 4 + len;\n\t\t\tchunks[id] = chunks[id] || [];\n\t\t\t\n\t\t\tif (id == 'RIFF' || id == 'LIST') {\n\t\t\t\tchunks[id].push(parseRIFF(data));\n\t\t\t} else {\n\t\t\t\tchunks[id].push(data);\n\t\t\t}\n\t\t}\n\t\treturn chunks;\n\t}\n\n\t// here's a little utility function that acts as a utility for other functions\n\t// basically, the only purpose is for encoding \"Duration\", which is encoded as\n\t// a double (considerably more difficult to encode than an integer)\n\tfunction doubleToString(num){\n\t\treturn [].slice.call(\n\t\t\tnew Uint8Array(\n\t\t\t\t(\n\t\t\t\t\tnew Float64Array([num]) //create a float64 array\n\t\t\t\t).buffer) //extract the array buffer\n\t\t\t, 0) // convert the Uint8Array into a regular array\n\t\t\t.map(function(e){ //since it's a regular array, we can now use map\n\t\t\t\treturn String.fromCharCode(e) // encode all the bytes individually\n\t\t\t})\n\t\t\t.reverse() //correct the byte endianness (assume it's little endian for now)\n\t\t\t.join('') // join the bytes in holy matrimony as a string\n\t}\n\n\tfunction WhammyVideo(speed, quality){ // a more abstract-ish API\n\t\tthis.frames = [];\n\t\tthis.duration = 1000 / speed;\n\t\tthis.quality = quality || 0.8;\n\t}\n\n\tWhammyVideo.prototype.add = function(frame, duration){\n\t\tif(typeof duration != 'undefined' && this.duration) throw \"you can't pass a duration if the fps is set\";\n\t\tif(typeof duration == 'undefined' && !this.duration) throw \"if you don't have the fps set, you ned to have durations here.\"\n\t\tif('canvas' in frame){ //CanvasRenderingContext2D\n\t\t\tframe = frame.canvas;\t\n\t\t}\n\t\tif('toDataURL' in frame){\n\t\t\tframe = frame.toDataURL('image/webp', this.quality)\n\t\t}else if(typeof frame != \"string\"){\n\t\t\tthrow \"frame must be a a HTMLCanvasElement, a CanvasRenderingContext2D or a DataURI formatted string\"\n\t\t}\n\t\tif (!(/^data:image\\/webp;base64,/ig).test(frame)) {\n\t\t\tthrow \"Input must be formatted properly as a base64 encoded DataURI of type image/webp\";\n\t\t}\n\t\tthis.frames.push({\n\t\t\timage: frame,\n\t\t\tduration: duration || this.duration\n\t\t})\n\t}\n\t\n\tWhammyVideo.prototype.compile = function(outputAsArray){\n\t\treturn new toWebM(this.frames.map(function(frame){\n\t\t\tvar webp = parseWebP(parseRIFF(atob(frame.image.slice(23))));\n\t\t\twebp.duration = frame.duration;\n\t\t\treturn webp;\n\t\t}), outputAsArray)\n\t}\n\n\treturn {\n\t\tVideo: WhammyVideo,\n\t\tfromImageArray: function(images, fps, outputAsArray){\n\t\t\treturn toWebM(images.map(function(image){\n\t\t\t\tvar webp = parseWebP(parseRIFF(atob(image.slice(23))))\n\t\t\t\twebp.duration = 1000 / fps;\n\t\t\t\treturn webp;\n\t\t\t}), outputAsArray)\n\t\t},\n\t\ttoWebM: toWebM\n\t\t// expose methods of madness\n\t}\n})();\n\nif (typeof process !== 'undefined') module.exports = Whammy;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}