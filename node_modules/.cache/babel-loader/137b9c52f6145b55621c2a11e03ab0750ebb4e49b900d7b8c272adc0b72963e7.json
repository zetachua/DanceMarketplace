{"ast":null,"code":"import { cubicCoordinates } from './lib/cubic-coordinates';\nimport easingShorthandMap from './lib/easing-map';\nimport * as shared from './lib/shared';\nimport { stepsCoordinates } from './lib/steps-coordinates';\nfunction easingCoordinates(easingFunction, polySteps) {\n  const errorMsgStart = `Error parsing \"${easingFunction}\".`;\n  // If a shorthand like \"ease-in\" is provided then convert to equivalent cubic-bezier\n  if (easingShorthandMap[easingFunction]) {\n    easingFunction = easingShorthandMap[easingFunction];\n  }\n  // If we think it's a steps function\n  if (easingFunction.includes('steps(')) {\n    const args = shared.getFunctionArguments(easingFunction);\n    const [stepCount, stepSkip] = args;\n    if (args.length < 1 || args.length > 2) {\n      throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 1 or 2.`);\n    } else {\n      if (typeof args[0] !== 'number') {\n        throw new Error(`${errorMsgStart} \"${args[0]}\" is not a number.`);\n      } else if (args.length === 2 && typeof args[1] !== 'string') {\n        throw new Error(`${errorMsgStart} \"${args[1]}\" is not a string.`);\n      }\n      return stepsCoordinates(stepCount, stepSkip);\n    }\n    // If we think it's a cubic-bezier function\n  } else if (easingFunction.includes('cubic-bezier(')) {\n    const args = shared.getFunctionArguments(easingFunction);\n    const [x1, y1, x2, y2] = args;\n    if (args.length !== 4) {\n      throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 4.`);\n    } else {\n      args.forEach(arg => {\n        if (typeof arg !== 'number') {\n          throw new Error(`${errorMsgStart} \"${arg}\" is not a number.`);\n        }\n      });\n      return cubicCoordinates(x1, y1, x2, y2, polySteps);\n    }\n    // If it's not cubic bezier or steps it's not an easing function\n  } else {\n    throw new Error(`${errorMsgStart} If not a typo then please create a GitHub issue :)`);\n  }\n}\nexport { stepsCoordinates, cubicCoordinates, easingCoordinates, easingCoordinates as default };","map":{"version":3,"names":["cubicCoordinates","easingShorthandMap","shared","stepsCoordinates","easingCoordinates","easingFunction","polySteps","errorMsgStart","includes","args","getFunctionArguments","stepCount","stepSkip","length","Error","x1","y1","x2","y2","forEach","arg","default"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/node_modules/easing-coordinates/dist/index.js"],"sourcesContent":["import { cubicCoordinates } from './lib/cubic-coordinates'\nimport easingShorthandMap from './lib/easing-map'\nimport * as shared from './lib/shared'\nimport { stepsCoordinates } from './lib/steps-coordinates'\nfunction easingCoordinates(easingFunction, polySteps) {\n  const errorMsgStart = `Error parsing \"${easingFunction}\".`\n  // If a shorthand like \"ease-in\" is provided then convert to equivalent cubic-bezier\n  if (easingShorthandMap[easingFunction]) {\n    easingFunction = easingShorthandMap[easingFunction]\n  }\n  // If we think it's a steps function\n  if (easingFunction.includes('steps(')) {\n    const args = shared.getFunctionArguments(easingFunction)\n    const [stepCount, stepSkip] = args\n    if (args.length < 1 || args.length > 2) {\n      throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 1 or 2.`)\n    } else {\n      if (typeof args[0] !== 'number') {\n        throw new Error(`${errorMsgStart} \"${args[0]}\" is not a number.`)\n      } else if (args.length === 2 && typeof args[1] !== 'string') {\n        throw new Error(`${errorMsgStart} \"${args[1]}\" is not a string.`)\n      }\n      return stepsCoordinates(stepCount, stepSkip)\n    }\n    // If we think it's a cubic-bezier function\n  } else if (easingFunction.includes('cubic-bezier(')) {\n    const args = shared.getFunctionArguments(easingFunction)\n    const [x1, y1, x2, y2] = args\n    if (args.length !== 4) {\n      throw new Error(`${errorMsgStart} Got ${args.length} arguments but expected 4.`)\n    } else {\n      args.forEach(arg => {\n        if (typeof arg !== 'number') {\n          throw new Error(`${errorMsgStart} \"${arg}\" is not a number.`)\n        }\n      })\n      return cubicCoordinates(x1, y1, x2, y2, polySteps)\n    }\n    // If it's not cubic bezier or steps it's not an easing function\n  } else {\n    throw new Error(`${errorMsgStart} If not a typo then please create a GitHub issue :)`)\n  }\n}\nexport { stepsCoordinates, cubicCoordinates, easingCoordinates, easingCoordinates as default }\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAOC,kBAAkB,MAAM,kBAAkB;AACjD,OAAO,KAAKC,MAAM,MAAM,cAAc;AACtC,SAASC,gBAAgB,QAAQ,yBAAyB;AAC1D,SAASC,iBAAiBA,CAACC,cAAc,EAAEC,SAAS,EAAE;EACpD,MAAMC,aAAa,GAAI,kBAAiBF,cAAe,IAAG;EAC1D;EACA,IAAIJ,kBAAkB,CAACI,cAAc,CAAC,EAAE;IACtCA,cAAc,GAAGJ,kBAAkB,CAACI,cAAc,CAAC;EACrD;EACA;EACA,IAAIA,cAAc,CAACG,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACrC,MAAMC,IAAI,GAAGP,MAAM,CAACQ,oBAAoB,CAACL,cAAc,CAAC;IACxD,MAAM,CAACM,SAAS,EAAEC,QAAQ,CAAC,GAAGH,IAAI;IAClC,IAAIA,IAAI,CAACI,MAAM,GAAG,CAAC,IAAIJ,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;MACtC,MAAM,IAAIC,KAAK,CAAE,GAAEP,aAAc,QAAOE,IAAI,CAACI,MAAO,iCAAgC,CAAC;IACvF,CAAC,MAAM;MACL,IAAI,OAAOJ,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAC/B,MAAM,IAAIK,KAAK,CAAE,GAAEP,aAAc,KAAIE,IAAI,CAAC,CAAC,CAAE,oBAAmB,CAAC;MACnE,CAAC,MAAM,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,IAAI,OAAOJ,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAC3D,MAAM,IAAIK,KAAK,CAAE,GAAEP,aAAc,KAAIE,IAAI,CAAC,CAAC,CAAE,oBAAmB,CAAC;MACnE;MACA,OAAON,gBAAgB,CAACQ,SAAS,EAAEC,QAAQ,CAAC;IAC9C;IACA;EACF,CAAC,MAAM,IAAIP,cAAc,CAACG,QAAQ,CAAC,eAAe,CAAC,EAAE;IACnD,MAAMC,IAAI,GAAGP,MAAM,CAACQ,oBAAoB,CAACL,cAAc,CAAC;IACxD,MAAM,CAACU,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGT,IAAI;IAC7B,IAAIA,IAAI,CAACI,MAAM,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAE,GAAEP,aAAc,QAAOE,IAAI,CAACI,MAAO,4BAA2B,CAAC;IAClF,CAAC,MAAM;MACLJ,IAAI,CAACU,OAAO,CAACC,GAAG,IAAI;QAClB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;UAC3B,MAAM,IAAIN,KAAK,CAAE,GAAEP,aAAc,KAAIa,GAAI,oBAAmB,CAAC;QAC/D;MACF,CAAC,CAAC;MACF,OAAOpB,gBAAgB,CAACe,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEZ,SAAS,CAAC;IACpD;IACA;EACF,CAAC,MAAM;IACL,MAAM,IAAIQ,KAAK,CAAE,GAAEP,aAAc,qDAAoD,CAAC;EACxF;AACF;AACA,SAASJ,gBAAgB,EAAEH,gBAAgB,EAAEI,iBAAiB,EAAEA,iBAAiB,IAAIiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}