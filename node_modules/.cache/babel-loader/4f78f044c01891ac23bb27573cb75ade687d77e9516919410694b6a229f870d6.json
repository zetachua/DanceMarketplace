{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Uses generative AI to replace parts of your image with something else.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeReplace extends Action {\n  constructor() {\n    super();\n    this._preserveGeometry = false;\n    this._detectMultiple = false;\n    this._actionModel.actionType = \"generativeReplace\";\n  }\n  from(value) {\n    this._from = value;\n    this._actionModel.from = value;\n    return this;\n  }\n  to(value) {\n    this._to = value;\n    this._actionModel.to = value;\n    return this;\n  }\n  preserveGeometry(value = true) {\n    this._preserveGeometry = value;\n    if (value) {\n      this._actionModel.preserveGeometry = true;\n    }\n    return this;\n  }\n  detectMultiple(value = true) {\n    this._detectMultiple = value;\n    if (this._detectMultiple) {\n      this._actionModel.detectMultiple = this._detectMultiple;\n    }\n    return this;\n  }\n  prepareQualifiers() {\n    let str = `gen_replace:from_${this._from};to_${this._to}`;\n    if (this._preserveGeometry) {\n      str += `;preserve-geometry_true`;\n    }\n    if (this._detectMultiple) {\n      str += `;multiple_true`;\n    }\n    this.addQualifier(new Qualifier(\"e\", str));\n  }\n  static fromJson(actionModel) {\n    const {\n      from,\n      to,\n      preserveGeometry,\n      detectMultiple\n    } = actionModel;\n    const result = new this();\n    result.from(from);\n    result.to(to);\n    if (preserveGeometry) {\n      result.preserveGeometry();\n    }\n    if (detectMultiple) {\n      result.detectMultiple();\n    }\n    return result;\n  }\n}\nexport { GenerativeReplace };","map":{"version":3,"names":["Action","Qualifier","GenerativeReplace","constructor","_preserveGeometry","_detectMultiple","_actionModel","actionType","from","value","_from","to","_to","preserveGeometry","detectMultiple","prepareQualifiers","str","addQualifier","fromJson","actionModel","result"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/GenerativeReplace.js"],"sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @description Uses generative AI to replace parts of your image with something else.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass GenerativeReplace extends Action {\n    constructor() {\n        super();\n        this._preserveGeometry = false;\n        this._detectMultiple = false;\n        this._actionModel.actionType = \"generativeReplace\";\n    }\n    from(value) {\n        this._from = value;\n        this._actionModel.from = value;\n        return this;\n    }\n    to(value) {\n        this._to = value;\n        this._actionModel.to = value;\n        return this;\n    }\n    preserveGeometry(value = true) {\n        this._preserveGeometry = value;\n        if (value) {\n            this._actionModel.preserveGeometry = true;\n        }\n        return this;\n    }\n    detectMultiple(value = true) {\n        this._detectMultiple = value;\n        if (this._detectMultiple) {\n            this._actionModel.detectMultiple = this._detectMultiple;\n        }\n        return this;\n    }\n    prepareQualifiers() {\n        let str = `gen_replace:from_${this._from};to_${this._to}`;\n        if (this._preserveGeometry) {\n            str += `;preserve-geometry_true`;\n        }\n        if (this._detectMultiple) {\n            str += `;multiple_true`;\n        }\n        this.addQualifier(new Qualifier(\"e\", str));\n    }\n    static fromJson(actionModel) {\n        const { from, to, preserveGeometry, detectMultiple } = actionModel;\n        const result = new this();\n        result.from(from);\n        result.to(to);\n        if (preserveGeometry) {\n            result.preserveGeometry();\n        }\n        if (detectMultiple) {\n            result.detectMultiple();\n        }\n        return result;\n    }\n}\nexport { GenerativeReplace };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AACjD,SAASC,SAAS,QAAQ,uCAAuC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,iBAAiB,SAASF,MAAM,CAAC;EACnCG,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,iBAAiB,GAAG,KAAK;IAC9B,IAAI,CAACC,eAAe,GAAG,KAAK;IAC5B,IAAI,CAACC,YAAY,CAACC,UAAU,GAAG,mBAAmB;EACtD;EACAC,IAAIA,CAACC,KAAK,EAAE;IACR,IAAI,CAACC,KAAK,GAAGD,KAAK;IAClB,IAAI,CAACH,YAAY,CAACE,IAAI,GAAGC,KAAK;IAC9B,OAAO,IAAI;EACf;EACAE,EAAEA,CAACF,KAAK,EAAE;IACN,IAAI,CAACG,GAAG,GAAGH,KAAK;IAChB,IAAI,CAACH,YAAY,CAACK,EAAE,GAAGF,KAAK;IAC5B,OAAO,IAAI;EACf;EACAI,gBAAgBA,CAACJ,KAAK,GAAG,IAAI,EAAE;IAC3B,IAAI,CAACL,iBAAiB,GAAGK,KAAK;IAC9B,IAAIA,KAAK,EAAE;MACP,IAAI,CAACH,YAAY,CAACO,gBAAgB,GAAG,IAAI;IAC7C;IACA,OAAO,IAAI;EACf;EACAC,cAAcA,CAACL,KAAK,GAAG,IAAI,EAAE;IACzB,IAAI,CAACJ,eAAe,GAAGI,KAAK;IAC5B,IAAI,IAAI,CAACJ,eAAe,EAAE;MACtB,IAAI,CAACC,YAAY,CAACQ,cAAc,GAAG,IAAI,CAACT,eAAe;IAC3D;IACA,OAAO,IAAI;EACf;EACAU,iBAAiBA,CAAA,EAAG;IAChB,IAAIC,GAAG,GAAI,oBAAmB,IAAI,CAACN,KAAM,OAAM,IAAI,CAACE,GAAI,EAAC;IACzD,IAAI,IAAI,CAACR,iBAAiB,EAAE;MACxBY,GAAG,IAAK,yBAAwB;IACpC;IACA,IAAI,IAAI,CAACX,eAAe,EAAE;MACtBW,GAAG,IAAK,gBAAe;IAC3B;IACA,IAAI,CAACC,YAAY,CAAC,IAAIhB,SAAS,CAAC,GAAG,EAAEe,GAAG,CAAC,CAAC;EAC9C;EACA,OAAOE,QAAQA,CAACC,WAAW,EAAE;IACzB,MAAM;MAAEX,IAAI;MAAEG,EAAE;MAAEE,gBAAgB;MAAEC;IAAe,CAAC,GAAGK,WAAW;IAClE,MAAMC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC;IACzBA,MAAM,CAACZ,IAAI,CAACA,IAAI,CAAC;IACjBY,MAAM,CAACT,EAAE,CAACA,EAAE,CAAC;IACb,IAAIE,gBAAgB,EAAE;MAClBO,MAAM,CAACP,gBAAgB,CAAC,CAAC;IAC7B;IACA,IAAIC,cAAc,EAAE;MAChBM,MAAM,CAACN,cAAc,CAAC,CAAC;IAC3B;IACA,OAAOM,MAAM;EACjB;AACJ;AACA,SAASlB,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}