{"ast":null,"code":"var _jsxFileName = \"/Users/zetachua/Documents/GitHub/DanceMarketplace/src/Components/ScreenrecordToGif/screenRecordToGif.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport GIF from 'gif.js-upgrade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScreenRecorderWithGIFConversion = () => {\n  _s();\n  const videoRef = useRef();\n  const [recording, setRecording] = useState(false);\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          aspectRatio: 9 / 16 // Set the aspect ratio for portrait mode\n        }\n      });\n\n      const recorder = new MediaRecorder(stream);\n      const chunks = [];\n      recorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n      recorder.onstop = () => {\n        const webmBlob = new Blob(chunks, {\n          type: 'video/webm'\n        });\n        const webmUrl = URL.createObjectURL(webmBlob);\n        videoRef.current.src = webmUrl;\n        convertWebMToGIF(webmBlob);\n      };\n      recorder.start();\n      setRecording(true);\n      setTimeout(() => {\n        recorder.stop();\n        stream.getTracks().forEach(track => track.stop());\n        setRecording(false);\n      }, 5000); // Recording for exactly 5 seconds\n    } catch (error) {\n      console.error('Error starting recording:', error);\n    }\n  };\n  const convertWebMToGIF = webmBlob => {\n    const videoElement = document.createElement('video');\n    videoElement.src = URL.createObjectURL(webmBlob);\n    videoElement.addEventListener('loadeddata', async () => {\n      const gif = new GIF({\n        workers: 2,\n        quality: 10\n      });\n      const originalCanvas = document.createElement('canvas');\n      const originalCtx = originalCanvas.getContext('2d');\n      const processingCanvas = document.createElement('canvas');\n      const processingCtx = processingCanvas.getContext('2d');\n\n      // Set original canvas dimensions to the video dimensions\n      originalCanvas.width = videoElement.videoWidth;\n      originalCanvas.height = videoElement.videoHeight;\n\n      // Set processing canvas dimensions to portrait mode\n      processingCanvas.width = videoElement.videoHeight;\n      processingCanvas.height = videoElement.videoWidth;\n      const frameDuration = 40; // Adjust the delay as needed (25 frames per second)\n\n      let currentTime = 0;\n      const processFrame = () => {\n        originalCtx.drawImage(videoElement, 0, 0, videoElement.videoWidth, videoElement.videoHeight);\n\n        // Draw the original frame onto the processing canvas (rotated and flipped)\n        processingCtx.save();\n        processingCtx.translate(processingCanvas.width, 0);\n        processingCtx.rotate(90 * Math.PI / 180);\n        processingCtx.drawImage(originalCanvas, 0, 0, originalCanvas.width, originalCanvas.height, 0, 0, processingCanvas.height, processingCanvas.width);\n        processingCtx.restore();\n\n        // Get the current frame as imageData\n        const imageData = processingCtx.getImageData(0, 0, processingCanvas.width, processingCanvas.height);\n\n        // Add the imageData as a frame to the GIF\n        gif.addFrame(imageData, {\n          delay: frameDuration\n        });\n\n        // Update the currentTime for the next frame\n        currentTime += frameDuration / 1000;\n\n        // Request the next frame\n        if (currentTime < videoElement.duration) {\n          requestAnimationFrame(processFrame);\n        } else {\n          // Finish and render the GIF when all frames are processed\n          gif.on('finished', blob => {\n            const gifUrl = URL.createObjectURL(blob);\n            videoRef.current.src = gifUrl;\n\n            // Apply CSS styling to make the video display in portrait mode\n            videoRef.current.style.transform = 'rotate(90deg)';\n            videoRef.current.style.width = `${videoElement.videoHeight}px`;\n            videoRef.current.style.height = `${videoElement.videoWidth}px`;\n          });\n          gif.render();\n        }\n      };\n\n      // Start processing frames\n      processFrame();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: recording,\n      children: recording ? 'Recording...' : 'Start Recording'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      controls: true,\n      style: {\n        marginTop: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n};\n_s(ScreenRecorderWithGIFConversion, \"JLHxrYDiFRBqQRzccvySQ7gjsCg=\");\n_c = ScreenRecorderWithGIFConversion;\nexport default ScreenRecorderWithGIFConversion;\nvar _c;\n$RefreshReg$(_c, \"ScreenRecorderWithGIFConversion\");","map":{"version":3,"names":["React","useRef","useState","GIF","jsxDEV","_jsxDEV","ScreenRecorderWithGIFConversion","_s","videoRef","recording","setRecording","startRecording","stream","navigator","mediaDevices","getDisplayMedia","video","aspectRatio","recorder","MediaRecorder","chunks","ondataavailable","event","data","size","push","onstop","webmBlob","Blob","type","webmUrl","URL","createObjectURL","current","src","convertWebMToGIF","start","setTimeout","stop","getTracks","forEach","track","error","console","videoElement","document","createElement","addEventListener","gif","workers","quality","originalCanvas","originalCtx","getContext","processingCanvas","processingCtx","width","videoWidth","height","videoHeight","frameDuration","currentTime","processFrame","drawImage","save","translate","rotate","Math","PI","restore","imageData","getImageData","addFrame","delay","duration","requestAnimationFrame","on","blob","gifUrl","style","transform","render","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","ref","controls","marginTop","_c","$RefreshReg$"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/src/Components/ScreenrecordToGif/screenRecordToGif.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport GIF from 'gif.js-upgrade';\n\nconst ScreenRecorderWithGIFConversion = () => {\n  const videoRef = useRef();\n  const [recording, setRecording] = useState(false);\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getDisplayMedia({\n        video: {\n          aspectRatio: 9 / 16, // Set the aspect ratio for portrait mode\n        },\n      });\n      const recorder = new MediaRecorder(stream);\n\n      const chunks = [];\n      recorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          chunks.push(event.data);\n        }\n      };\n\n      recorder.onstop = () => {\n        const webmBlob = new Blob(chunks, { type: 'video/webm' });\n        const webmUrl = URL.createObjectURL(webmBlob);\n        videoRef.current.src = webmUrl;\n\n        convertWebMToGIF(webmBlob);\n      };\n\n      recorder.start();\n      setRecording(true);\n\n      setTimeout(() => {\n        recorder.stop();\n        stream.getTracks().forEach((track) => track.stop());\n        setRecording(false);\n      }, 5000); // Recording for exactly 5 seconds\n    } catch (error) {\n      console.error('Error starting recording:', error);\n    }\n  };\n\n  const convertWebMToGIF = (webmBlob) => {\n    const videoElement = document.createElement('video');\n    videoElement.src = URL.createObjectURL(webmBlob);\n    videoElement.addEventListener('loadeddata', async () => {\n      const gif = new GIF({ workers: 2, quality: 10 });\n      const originalCanvas = document.createElement('canvas');\n      const originalCtx = originalCanvas.getContext('2d');\n  \n      const processingCanvas = document.createElement('canvas');\n      const processingCtx = processingCanvas.getContext('2d');\n  \n      // Set original canvas dimensions to the video dimensions\n      originalCanvas.width = videoElement.videoWidth;\n      originalCanvas.height = videoElement.videoHeight;\n  \n      // Set processing canvas dimensions to portrait mode\n      processingCanvas.width = videoElement.videoHeight;\n      processingCanvas.height = videoElement.videoWidth;\n  \n      const frameDuration = 40; // Adjust the delay as needed (25 frames per second)\n  \n      let currentTime = 0;\n  \n      const processFrame = () => {\n        originalCtx.drawImage(\n          videoElement,\n          0,\n          0,\n          videoElement.videoWidth,\n          videoElement.videoHeight\n        );\n  \n        // Draw the original frame onto the processing canvas (rotated and flipped)\n        processingCtx.save();\n        processingCtx.translate(processingCanvas.width, 0);\n        processingCtx.rotate((90 * Math.PI) / 180);\n        processingCtx.drawImage(\n          originalCanvas,\n          0,\n          0,\n          originalCanvas.width,\n          originalCanvas.height,\n          0,\n          0,\n          processingCanvas.height,\n          processingCanvas.width\n        );\n        processingCtx.restore();\n  \n        // Get the current frame as imageData\n        const imageData = processingCtx.getImageData(0, 0, processingCanvas.width, processingCanvas.height);\n  \n        // Add the imageData as a frame to the GIF\n        gif.addFrame(imageData, { delay: frameDuration });\n  \n        // Update the currentTime for the next frame\n        currentTime += frameDuration / 1000;\n  \n        // Request the next frame\n        if (currentTime < videoElement.duration) {\n          requestAnimationFrame(processFrame);\n        } else {\n          // Finish and render the GIF when all frames are processed\n          gif.on('finished', (blob) => {\n            const gifUrl = URL.createObjectURL(blob);\n            videoRef.current.src = gifUrl;\n  \n            // Apply CSS styling to make the video display in portrait mode\n            videoRef.current.style.transform = 'rotate(90deg)';\n            videoRef.current.style.width = `${videoElement.videoHeight}px`;\n            videoRef.current.style.height = `${videoElement.videoWidth}px`;\n          });\n  \n          gif.render();\n        }\n      };\n  \n      // Start processing frames\n      processFrame();\n    });\n  };\n  \n  return (\n    <div>\n      <button onClick={startRecording} disabled={recording}>\n        {recording ? 'Recording...' : 'Start Recording'}\n      </button>\n      <video ref={videoRef} controls style={{ marginTop: '10px' }} />\n    </div>\n  );\n};\n\nexport default ScreenRecorderWithGIFConversion;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,GAAG,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,+BAA+B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5C,MAAMC,QAAQ,GAAGP,MAAM,CAAC,CAAC;EACzB,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMS,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,eAAe,CAAC;QAC1DC,KAAK,EAAE;UACLC,WAAW,EAAE,CAAC,GAAG,EAAE,CAAE;QACvB;MACF,CAAC,CAAC;;MACF,MAAMC,QAAQ,GAAG,IAAIC,aAAa,CAACP,MAAM,CAAC;MAE1C,MAAMQ,MAAM,GAAG,EAAE;MACjBF,QAAQ,CAACG,eAAe,GAAIC,KAAK,IAAK;QACpC,IAAIA,KAAK,CAACC,IAAI,CAACC,IAAI,GAAG,CAAC,EAAE;UACvBJ,MAAM,CAACK,IAAI,CAACH,KAAK,CAACC,IAAI,CAAC;QACzB;MACF,CAAC;MAEDL,QAAQ,CAACQ,MAAM,GAAG,MAAM;QACtB,MAAMC,QAAQ,GAAG,IAAIC,IAAI,CAACR,MAAM,EAAE;UAAES,IAAI,EAAE;QAAa,CAAC,CAAC;QACzD,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACL,QAAQ,CAAC;QAC7CnB,QAAQ,CAACyB,OAAO,CAACC,GAAG,GAAGJ,OAAO;QAE9BK,gBAAgB,CAACR,QAAQ,CAAC;MAC5B,CAAC;MAEDT,QAAQ,CAACkB,KAAK,CAAC,CAAC;MAChB1B,YAAY,CAAC,IAAI,CAAC;MAElB2B,UAAU,CAAC,MAAM;QACfnB,QAAQ,CAACoB,IAAI,CAAC,CAAC;QACf1B,MAAM,CAAC2B,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;QACnD5B,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,OAAOgC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAMP,gBAAgB,GAAIR,QAAQ,IAAK;IACrC,MAAMiB,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;IACpDF,YAAY,CAACV,GAAG,GAAGH,GAAG,CAACC,eAAe,CAACL,QAAQ,CAAC;IAChDiB,YAAY,CAACG,gBAAgB,CAAC,YAAY,EAAE,YAAY;MACtD,MAAMC,GAAG,GAAG,IAAI7C,GAAG,CAAC;QAAE8C,OAAO,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAG,CAAC,CAAC;MAChD,MAAMC,cAAc,GAAGN,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACvD,MAAMM,WAAW,GAAGD,cAAc,CAACE,UAAU,CAAC,IAAI,CAAC;MAEnD,MAAMC,gBAAgB,GAAGT,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MACzD,MAAMS,aAAa,GAAGD,gBAAgB,CAACD,UAAU,CAAC,IAAI,CAAC;;MAEvD;MACAF,cAAc,CAACK,KAAK,GAAGZ,YAAY,CAACa,UAAU;MAC9CN,cAAc,CAACO,MAAM,GAAGd,YAAY,CAACe,WAAW;;MAEhD;MACAL,gBAAgB,CAACE,KAAK,GAAGZ,YAAY,CAACe,WAAW;MACjDL,gBAAgB,CAACI,MAAM,GAAGd,YAAY,CAACa,UAAU;MAEjD,MAAMG,aAAa,GAAG,EAAE,CAAC,CAAC;;MAE1B,IAAIC,WAAW,GAAG,CAAC;MAEnB,MAAMC,YAAY,GAAGA,CAAA,KAAM;QACzBV,WAAW,CAACW,SAAS,CACnBnB,YAAY,EACZ,CAAC,EACD,CAAC,EACDA,YAAY,CAACa,UAAU,EACvBb,YAAY,CAACe,WACf,CAAC;;QAED;QACAJ,aAAa,CAACS,IAAI,CAAC,CAAC;QACpBT,aAAa,CAACU,SAAS,CAACX,gBAAgB,CAACE,KAAK,EAAE,CAAC,CAAC;QAClDD,aAAa,CAACW,MAAM,CAAE,EAAE,GAAGC,IAAI,CAACC,EAAE,GAAI,GAAG,CAAC;QAC1Cb,aAAa,CAACQ,SAAS,CACrBZ,cAAc,EACd,CAAC,EACD,CAAC,EACDA,cAAc,CAACK,KAAK,EACpBL,cAAc,CAACO,MAAM,EACrB,CAAC,EACD,CAAC,EACDJ,gBAAgB,CAACI,MAAM,EACvBJ,gBAAgB,CAACE,KACnB,CAAC;QACDD,aAAa,CAACc,OAAO,CAAC,CAAC;;QAEvB;QACA,MAAMC,SAAS,GAAGf,aAAa,CAACgB,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEjB,gBAAgB,CAACE,KAAK,EAAEF,gBAAgB,CAACI,MAAM,CAAC;;QAEnG;QACAV,GAAG,CAACwB,QAAQ,CAACF,SAAS,EAAE;UAAEG,KAAK,EAAEb;QAAc,CAAC,CAAC;;QAEjD;QACAC,WAAW,IAAID,aAAa,GAAG,IAAI;;QAEnC;QACA,IAAIC,WAAW,GAAGjB,YAAY,CAAC8B,QAAQ,EAAE;UACvCC,qBAAqB,CAACb,YAAY,CAAC;QACrC,CAAC,MAAM;UACL;UACAd,GAAG,CAAC4B,EAAE,CAAC,UAAU,EAAGC,IAAI,IAAK;YAC3B,MAAMC,MAAM,GAAG/C,GAAG,CAACC,eAAe,CAAC6C,IAAI,CAAC;YACxCrE,QAAQ,CAACyB,OAAO,CAACC,GAAG,GAAG4C,MAAM;;YAE7B;YACAtE,QAAQ,CAACyB,OAAO,CAAC8C,KAAK,CAACC,SAAS,GAAG,eAAe;YAClDxE,QAAQ,CAACyB,OAAO,CAAC8C,KAAK,CAACvB,KAAK,GAAI,GAAEZ,YAAY,CAACe,WAAY,IAAG;YAC9DnD,QAAQ,CAACyB,OAAO,CAAC8C,KAAK,CAACrB,MAAM,GAAI,GAAEd,YAAY,CAACa,UAAW,IAAG;UAChE,CAAC,CAAC;UAEFT,GAAG,CAACiC,MAAM,CAAC,CAAC;QACd;MACF,CAAC;;MAED;MACAnB,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC;EAED,oBACEzD,OAAA;IAAA6E,QAAA,gBACE7E,OAAA;MAAQ8E,OAAO,EAAExE,cAAe;MAACyE,QAAQ,EAAE3E,SAAU;MAAAyE,QAAA,EAClDzE,SAAS,GAAG,cAAc,GAAG;IAAiB;MAAA4E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC,CAAC,eACTnF,OAAA;MAAOoF,GAAG,EAAEjF,QAAS;MAACkF,QAAQ;MAACX,KAAK,EAAE;QAAEY,SAAS,EAAE;MAAO;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAACjF,EAAA,CAnIID,+BAA+B;AAAAsF,EAAA,GAA/BtF,+BAA+B;AAqIrC,eAAeA,+BAA+B;AAAC,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}