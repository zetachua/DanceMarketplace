{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { faces, ocr } from \"../../qualifiers/region.js\";\nimport { CustomRegion } from \"../../qualifiers/region/CustomRegion.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BlurAction extends Action {\n  constructor(strength) {\n    super();\n    this._actionModel = {};\n    this._strength = strength;\n    this._actionModel.actionType = 'blur';\n    this._actionModel.strength = strength;\n  }\n  /**\n   * @description Specifies the region to blur.\n   * @param {NamedRegion} blurRegion\n   */\n  region(blurRegion) {\n    this._region = blurRegion;\n    this._actionModel.region = blurRegion.toJson();\n    return this;\n  }\n  /**\n   * @description Sets the strength of the blur effect.\n   * @param {number | string} strength\n   */\n  strength(strength) {\n    this._strength = strength;\n    this._actionModel.strength = strength;\n    return this;\n  }\n  prepareQualifiers() {\n    /*\n     * Blur with region is a unique object in this codebase.\n     * On top of Blur being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of Blur in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (Blur and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with Blur\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const strength = this._strength ? `:${this._strength}` : '';\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers;\n      // Copy qualifiers from the region \"action\" to the blur action\n      qualifiers.forEach(q => this.addQualifier(q));\n      if (this._region.regionType === 'custom') {\n        this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n      }\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `blur_faces${strength}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `blur${strength}`));\n    }\n  }\n  static fromJson(actionModel) {\n    const {\n      strength,\n      region\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this(strength);\n    strength && result.strength(strength);\n    if (region && region.regionType === 'faces') {\n      result.region(faces());\n    }\n    if (region && region.regionType === 'ocr_text') {\n      result.region(ocr());\n    }\n    if (region && region.regionType === 'custom') {\n      result.region(CustomRegion.fromJson(region));\n    }\n    return result;\n  }\n}\nexport { BlurAction };","map":{"version":3,"names":["Qualifier","Action","faces","ocr","CustomRegion","BlurAction","constructor","strength","_actionModel","_strength","actionType","region","blurRegion","_region","toJson","prepareQualifiers","qualifiers","forEach","q","addQualifier","regionType","fromJson","actionModel","result"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/node_modules/@cloudinary/transformation-builder-sdk/actions/effect/Blur.js"],"sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { faces, ocr } from \"../../qualifiers/region.js\";\nimport { CustomRegion } from \"../../qualifiers/region/CustomRegion.js\";\n/**\n * @description The Action class of the blur Builder.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass BlurAction extends Action {\n    constructor(strength) {\n        super();\n        this._actionModel = {};\n        this._strength = strength;\n        this._actionModel.actionType = 'blur';\n        this._actionModel.strength = strength;\n    }\n    /**\n     * @description Specifies the region to blur.\n     * @param {NamedRegion} blurRegion\n     */\n    region(blurRegion) {\n        this._region = blurRegion;\n        this._actionModel.region = blurRegion.toJson();\n        return this;\n    }\n    /**\n     * @description Sets the strength of the blur effect.\n     * @param {number | string} strength\n     */\n    strength(strength) {\n        this._strength = strength;\n        this._actionModel.strength = strength;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * Blur with region is a unique object in this codebase.\n         * On top of Blur being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of Blur in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (Blur and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with Blur\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const strength = this._strength ? `:${this._strength}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the blur action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'custom') {\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `blur_region${strength}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `blur_faces${strength}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `blur${strength}`));\n        }\n    }\n    static fromJson(actionModel) {\n        const { strength, region } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(strength);\n        strength && result.strength(strength);\n        if (region && region.regionType === 'faces') {\n            result.region(faces());\n        }\n        if (region && region.regionType === 'ocr_text') {\n            result.region(ocr());\n        }\n        if (region && region.regionType === 'custom') {\n            result.region(CustomRegion.fromJson(region));\n        }\n        return result;\n    }\n}\nexport { BlurAction };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}