{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n  /**\n   * @description Adds a border of the specified type around an image or video.\n   * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n   * @param {string} color The color of the border.\n   * @param {number} borderWidth The width in pixels.\n   */\n  constructor(borderType, color, borderWidth) {\n    super();\n    this._actionModel = {};\n    this.borderType = borderType;\n    this.borderColor = prepareColor(color);\n    this.borderWidth = borderWidth;\n    this._actionModel = {\n      color: prepareColor(color),\n      width: borderWidth,\n      actionType: 'border'\n    };\n  }\n  /**\n   * @description Sets the width of the border\n   * @param {number | string} borderWidth The width in pixels.\n   */\n  width(borderWidth) {\n    this.borderWidth = borderWidth;\n    this._actionModel.width = borderWidth;\n    return this;\n  }\n  /**\n   * @description Sets the color of the border.\n   * @param {string} borderColor The color of the border.\n   */\n  color(borderColor) {\n    this.borderColor = prepareColor(borderColor);\n    this._actionModel.color = prepareColor(borderColor);\n    return this;\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param {RoundCornersAction} roundCorners\n   * @return {this}\n   */\n  roundCorners(roundCorners) {\n    this._roundCorners = roundCorners;\n    this._actionModel.radius = roundCorners.getRadius();\n    return this;\n  }\n  /**\n   * @description Sets the style of the border.\n   * @param {number | string} width The width in pixels.\n   * @param {string} color The color of the border, e.g 'green', 'yellow'.\n   * @return {this}\n   */\n  solid(width, color) {\n    this.borderType = 'solid';\n    this.borderColor = prepareColor(color);\n    this.borderWidth = width;\n    this._actionModel.color = prepareColor(color);\n    this._actionModel.width = width;\n    return this;\n  }\n  prepareQualifiers() {\n    const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n    this.addQualifier(new Qualifier('bo', qualifierValue));\n    if (this._roundCorners) {\n      this.addQualifier(this._roundCorners.qualifiers.get('r'));\n    }\n  }\n  static fromJson(actionModel) {\n    const {\n      width,\n      color,\n      radius\n    } = actionModel;\n    // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n    const result = new this('solid', color, width);\n    if (radius) {\n      const roundCornersAction = (() => {\n        if (radius === 'max') {\n          return new RoundCornersAction().max();\n        }\n        if (Array.isArray(radius)) {\n          return new RoundCornersAction().radius(...radius);\n        }\n        return undefined;\n      })();\n      if (roundCornersAction) {\n        result.roundCorners(roundCornersAction);\n      }\n    }\n    return result;\n  }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n  return new BorderAction('solid', color, width);\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the radius of the border.\n * @param {Actions.RoundCorners.RoundCornersAction} roundCorners RoundCorners action.\n * @return {Actions.Border.BorderAction}\n */\nfunction roundCorners(roundCorners) {\n  const borderActionInstance = new BorderAction('solid', 'transparent', 0);\n  borderActionInstance.roundCorners(roundCorners);\n  return borderActionInstance;\n}\nconst Border = {\n  solid,\n  roundCorners\n};\nexport { BorderAction, Border, solid, roundCorners };","map":{"version":3,"names":["Action","QualifierValue","Qualifier","prepareColor","RoundCornersAction","BorderAction","constructor","borderType","color","borderWidth","_actionModel","borderColor","width","actionType","roundCorners","_roundCorners","radius","getRadius","solid","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","qualifiers","get","fromJson","actionModel","result","roundCornersAction","max","Array","isArray","undefined","borderActionInstance","Border"],"sources":["/Users/zetachua/Documents/GitHub/DanceMarketplace/node_modules/@cloudinary/transformation-builder-sdk/actions/border.js"],"sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../internal/utils/prepareColor.js\";\nimport RoundCornersAction from \"./roundCorners/RoundCornersAction.js\";\n/**\n * @description Adds a solid border around an image or video.\n *\n *  <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/effects_and_artistic_enhancements#borders|Adding image borders}\n * @memberOf Actions\n * @namespace Border\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {solid} from \"@cloudinary/url-gen/actions/border\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  solid(15, 'green'),\n *  // Or alternatively\n *  solid().width(15).color('green')\n * );\n *\n */\n/**\n * @memberOf Actions.Border\n * @see Actions.Border\n * @example\n * // Used through a builder function Border.solid(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.border(\n *  Border.solid(15, 'green'),\n *  // Or alternatively\n *  Border.solid().width(15).color('green')\n * );\n */\nclass BorderAction extends Action {\n    /**\n     * @description Adds a border of the specified type around an image or video.\n     * @param {'solid'} borderType The type of border (currently only 'solid' is supported). Use values in {@link Qualifiers.Border|Border Values}.\n     * @param {string} color The color of the border.\n     * @param {number} borderWidth The width in pixels.\n     */\n    constructor(borderType, color, borderWidth) {\n        super();\n        this._actionModel = {};\n        this.borderType = borderType;\n        this.borderColor = prepareColor(color);\n        this.borderWidth = borderWidth;\n        this._actionModel = {\n            color: prepareColor(color),\n            width: borderWidth,\n            actionType: 'border',\n        };\n    }\n    /**\n     * @description Sets the width of the border\n     * @param {number | string} borderWidth The width in pixels.\n     */\n    width(borderWidth) {\n        this.borderWidth = borderWidth;\n        this._actionModel.width = borderWidth;\n        return this;\n    }\n    /**\n     * @description Sets the color of the border.\n     * @param {string} borderColor The color of the border.\n     */\n    color(borderColor) {\n        this.borderColor = prepareColor(borderColor);\n        this._actionModel.color = prepareColor(borderColor);\n        return this;\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param {RoundCornersAction} roundCorners\n     * @return {this}\n     */\n    roundCorners(roundCorners) {\n        this._roundCorners = roundCorners;\n        this._actionModel.radius = roundCorners.getRadius();\n        return this;\n    }\n    /**\n     * @description Sets the style of the border.\n     * @param {number | string} width The width in pixels.\n     * @param {string} color The color of the border, e.g 'green', 'yellow'.\n     * @return {this}\n     */\n    solid(width, color) {\n        this.borderType = 'solid';\n        this.borderColor = prepareColor(color);\n        this.borderWidth = width;\n        this._actionModel.color = prepareColor(color);\n        this._actionModel.width = width;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue([`${this.borderWidth}px`, this.borderType, `${this.borderColor}`]).setDelimiter('_');\n        this.addQualifier(new Qualifier('bo', qualifierValue));\n        if (this._roundCorners) {\n            this.addQualifier(this._roundCorners.qualifiers.get('r'));\n        }\n    }\n    static fromJson(actionModel) {\n        const { width, color, radius } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this('solid', color, width);\n        if (radius) {\n            const roundCornersAction = (() => {\n                if (radius === 'max') {\n                    return new RoundCornersAction().max();\n                }\n                if (Array.isArray(radius)) {\n                    return new RoundCornersAction().radius(...radius);\n                }\n                return undefined;\n            })();\n            if (roundCornersAction) {\n                result.roundCorners(roundCornersAction);\n            }\n        }\n        return result;\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the style of the border.\n * @param {number | string} width The width in pixels.\n * @param {string} color The color of the border, e.g 'green', 'yellow'.\n * @return {Actions.Border.BorderAction}\n */\nfunction solid(width, color) {\n    return new BorderAction('solid', color, width);\n}\n/**\n * @summary action\n * @memberOf Actions.Border\n * @description Sets the radius of the border.\n * @param {Actions.RoundCorners.RoundCornersAction} roundCorners RoundCorners action.\n * @return {Actions.Border.BorderAction}\n */\nfunction roundCorners(roundCorners) {\n    const borderActionInstance = new BorderAction('solid', 'transparent', 0);\n    borderActionInstance.roundCorners(roundCorners);\n    return borderActionInstance;\n}\nconst Border = {\n    solid,\n    roundCorners,\n};\nexport { BorderAction, Border, solid, roundCorners };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}